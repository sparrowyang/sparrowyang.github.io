<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sparrowyang</title>
    <link>http://sparrooow.site/</link>
    <description>Recent content on Sparrowyang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn</language>
    <lastBuildDate>Mon, 23 May 2022 00:00:00 +0000</lastBuildDate><atom:link href="http://sparrooow.site/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rust交叉编译初学</title>
      <link>http://sparrooow.site/post/rust-cross-compile/</link>
      <pubDate>Mon, 23 May 2022 00:00:00 +0000</pubDate>
      
      <guid>http://sparrooow.site/post/rust-cross-compile/</guid>
      <description>今天写了个TCP监控程序，想试试能不能交叉编译到其他平台。比如我的安卓手机(arrch64/arm架构)。 按照官网给的编译教程，先安装编译的</description>
    </item>
    
    <item>
      <title>《C&#43;&#43;Primer》笔记</title>
      <link>http://sparrooow.site/post/cpp_prime/</link>
      <pubDate>Sat, 07 May 2022 00:00:00 +0000</pubDate>
      
      <guid>http://sparrooow.site/post/cpp_prime/</guid>
      <description>变量 变量初始化 1 2 3 4 int n = 0; int n = {0}; int n{0}; int n(0); 花括号（列表初始化）会对初始化时类型转换进行检查，若数据信息丢失（舍去）会报错.C++11. 在</description>
    </item>
    
    <item>
      <title>《精通Linux》笔记</title>
      <link>http://sparrooow.site/post/know_linux/</link>
      <pubDate>Sat, 26 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>http://sparrooow.site/post/know_linux/</guid>
      <description>很久之前就读了这本书，当时略看了一遍，觉得比较基础，面向新手，之后有想写读书笔记的想法，所以细看了一遍，感觉很多细节还是很讲的很清楚的。所以</description>
    </item>
    
    <item>
      <title>Asciinemaplayer</title>
      <link>http://sparrooow.site/post/asciinemaplayer/</link>
      <pubDate>Fri, 11 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>http://sparrooow.site/post/asciinemaplayer/</guid>
      <description>asciinema home page
Record a cast install a asciinema in you computer, and record a cast
1  asciinema rec hello.cast   copy hello.cast to path-to-your-hugo/static/ascrec/
Use shortcode in your Markdown file 1  [[% asciinema cf=&amp;#34;hello.cast&amp;#34; speed=&amp;#34;2&amp;#34; theme=&amp;#34;solarized-light&amp;#34; rows=&amp;#34;20&amp;#34; %]]   (To avoid Render, I use &amp;lsquo;[&amp;rsquo; to replace &amp;lsquo;{&amp;rsquo;, you must replce again! )
result:</description>
    </item>
    
    <item>
      <title>Rust中的枚举类2</title>
      <link>http://sparrooow.site/post/rust-3/</link>
      <pubDate>Sun, 30 May 2021 00:00:00 +0000</pubDate>
      
      <guid>http://sparrooow.site/post/rust-3/</guid>
      <description>好家伙，我还是低估了这奇怪的语法。 首先枚举里每个元素都是不同类型，可以由下面的几个trait推断出，行吧，这也不算奇怪。 1 2 3 4 5 6 7 enum Message {</description>
    </item>
    
    <item>
      <title>Rust中的枚举类</title>
      <link>http://sparrooow.site/post/rust-2/</link>
      <pubDate>Fri, 28 May 2021 00:00:00 +0000</pubDate>
      
      <guid>http://sparrooow.site/post/rust-2/</guid>
      <description>这关试了很久，终于过了。 枚举中嵌套了结构体和元组。 由Message::Move{ x: 10, y: 30 }可知，Move是一个结构体，Move定义在Mess</description>
    </item>
    
    <item>
      <title>About</title>
      <link>http://sparrooow.site/about/</link>
      <pubDate>Sat, 22 May 2021 23:12:10 +0800</pubDate>
      
      <guid>http://sparrooow.site/about/</guid>
      <description>Who am I? A Student of Computer Science &amp;amp; Technology in Ouc
Education  2018 - Now OUC  Skill Test </description>
    </item>
    
    <item>
      <title>c语言动态库</title>
      <link>http://sparrooow.site/post/1/</link>
      <pubDate>Sat, 22 May 2021 00:00:00 +0000</pubDate>
      
      <guid>http://sparrooow.site/post/1/</guid>
      <description>动态库的构建 编写库 fun.h: 1 void info(); fun.c: 1 2 3 4 5 6 #include &amp;lt;stdio.h&amp;gt;#include &amp;#34;fun.h&amp;#34; void info(){ printf(&amp;#34;you know me!&amp;#34;); } 编译 1 gcc -fPIC -shared fun.c -o libfun123.so 使用 main.c: 1 2 3 4 5 6 #include &amp;#34;fun.h&amp;#34;int main(int argc, char const *argv[]) { info(); return 0; } 1 gcc main.c libfun123.so -o app.out 此时检查编</description>
    </item>
    
    <item>
      <title>Rust中的String</title>
      <link>http://sparrooow.site/post/rust-1/</link>
      <pubDate>Sat, 08 May 2021 14:25:07 +0800</pubDate>
      
      <guid>http://sparrooow.site/post/rust-1/</guid>
      <description>rust study note 1 对 rust中的string 类型和&amp;amp;str类型，有时间好好研究一下 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 // quiz2.rs</description>
    </item>
    
    <item>
      <title>Deepin 修改引导界面</title>
      <link>http://sparrooow.site/post/linux-grub/</link>
      <pubDate>Mon, 15 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sparrooow.site/post/linux-grub/</guid>
      <description>自从装了deepin 15，也没多少时间用，大多是时间还是用windows，但是有些东西还是要在deepin 上跑。 问题是，每次开机都要和引导拼</description>
    </item>
    
    <item>
      <title>Seq 命令使用</title>
      <link>http://sparrooow.site/post/seq/</link>
      <pubDate>Mon, 11 May 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sparrooow.site/post/seq/</guid>
      <description>前阵子突然刷到这个命令seq,可以用来生成一堆有序的数。 生成速度还挺快的 查看帮助 seq --help 1 2 3 4 5 6 7 8 9 10 11 12 13 14 ┌─[yzf@sparrow</description>
    </item>
    
    <item>
      <title>ssh配置密钥加密</title>
      <link>http://sparrooow.site/post/ssh-key-2/</link>
      <pubDate>Tue, 04 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sparrooow.site/post/ssh-key-2/</guid>
      <description>上次防止服务器被ssh爆破的时候，提到了密钥加密。但是当时只是知道要这么做，也不理解为什么可以这么做。 所以，这不，刚学了密码学，对密钥的加密</description>
    </item>
    
    <item>
      <title>防止ssh穷举攻击</title>
      <link>http://sparrooow.site/post/ssh-key/</link>
      <pubDate>Mon, 20 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sparrooow.site/post/ssh-key/</guid>
      <description>今天ssh上服务器突然出现 1 2 3 4 5 C:\Users\sparrow&amp;gt;ssh root@sparrow123.xyz root@sparrow123.xyz&amp;#39;s password: Last failed login: Wed Jan 22 22:06:27 CST 2020 from 222.186.180.41 on ssh:notty There were 110814 failed login attempts since the last successful login. Last login: Mon Jan 6 18:22:38 2020 from 211.64.159.198 There were 110814 failed login11万次登录</description>
    </item>
    
  </channel>
</rss>
